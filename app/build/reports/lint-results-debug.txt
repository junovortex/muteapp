/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:197: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_UNMUTE [InlinedApi]
                    AudioManager.ADJUST_UNMUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:202: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_UNMUTE [InlinedApi]
                    AudioManager.ADJUST_UNMUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:207: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_UNMUTE [InlinedApi]
                    AudioManager.ADJUST_UNMUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:216: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_MUTE [InlinedApi]
                    AudioManager.ADJUST_MUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:221: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_MUTE [InlinedApi]
                    AudioManager.ADJUST_MUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:226: Warning: Field requires API level 23 (current min is 21): android.media.AudioManager#ADJUST_MUTE [InlinedApi]
                    AudioManager.ADJUST_MUTE,
                    ~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/MainActivity.kt:150: Warning: Field requires API level 23 (current min is 21): android.provider.Settings#ACTION_MANAGE_OVERLAY_PERMISSION [InlinedApi]
            val intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:$packageName"))
                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "InlinedApi":
   This check scans through all the Android API field references in the
   application and flags certain constants, such as static final integers and
   Strings, which were introduced in later versions. These will actually be
   copied into the class files rather than being referenced, which means that
   the value is available even when running on older devices. In some cases
   that's fine, and in other cases it can result in a runtime crash or
   incorrect behavior. It depends on the context, so consider the code
   carefully and decide whether it's safe and can be suppressed or whether the
   code needs to be guarded.

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:84: Warning: Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout's root element) [InflateParams]
        floatingView = LayoutInflater.from(this).inflate(R.layout.floating_button_layout, null)
                                                                                          ~~~~

   Explanation for issues of type "InflateParams":
   When inflating a layout, avoid passing in null as the parent view, since
   otherwise any layout parameters on the root of the inflated layout will be
   ignored.

   https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/

/Users/vinoth/muteapp/muteapp/app/build.gradle:40: Warning: A newer version of androidx.core:core-ktx than 1.10.1 is available: 1.17.0 [GradleDependency]
    implementation 'androidx.core:core-ktx:1.10.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:41: Warning: A newer version of androidx.appcompat:appcompat than 1.6.1 is available: 1.7.1 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:42: Warning: A newer version of com.google.android.material:material than 1.9.0 is available: 1.12.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.9.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:43: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:44: Warning: A newer version of androidx.lifecycle:lifecycle-livedata-ktx than 2.6.1 is available: 2.9.3 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:45: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel-ktx than 2.6.1 is available: 2.9.3 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:48: Warning: A newer version of com.google.android.gms:play-services-auth than 20.6.0 is available: 21.4.0 [GradleDependency]
    implementation 'com.google.android.gms:play-services-auth:20.6.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:49: Warning: A newer version of com.google.firebase:firebase-auth than 22.1.1 is available: 24.0.1 [GradleDependency]
    implementation 'com.google.firebase:firebase-auth:22.1.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:56: Warning: A newer version of androidx.test.ext:junit than 1.1.5 is available: 1.3.0 [GradleDependency]
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/build.gradle:57: Warning: A newer version of androidx.test.espresso:espresso-core than 3.5.1 is available: 3.7.0 [GradleDependency]
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/vinoth/muteapp/muteapp/app/src/main/res/values/themes.xml:13: Warning: Unnecessary; SDK_INT is always >= 21 [ObsoleteSdkInt]
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
                                            ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/vinoth/muteapp/muteapp/app/src/main/res/layout/floating_button_layout.xml:5: Warning: Possible overdraw: Root element paints background @color/floating_button_background with a theme that also paints a background (inferred theme is @style/Theme.MuteApp) [Overdraw]
    android:background="@color/floating_button_background"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/Users/vinoth/muteapp/muteapp/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/res/values/strings.xml:3: Warning: The resource R.string.sign_in_with_google appears to be unused [UnusedResources]
    <string name="sign_in_with_google">Sign in with Google</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/res/values/strings.xml:9: Warning: The resource R.string.grant_permission appears to be unused [UnusedResources]
    <string name="grant_permission">Grant Permission</string>
            ~~~~~~~~~~~~~~~~~~~~~~~
/Users/vinoth/muteapp/muteapp/app/src/main/res/values/strings.xml:13: Warning: The resource R.string.triple_click_to_close appears to be unused [UnusedResources]
    <string name="triple_click_to_close">Triple click to close app</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/Users/vinoth/muteapp/muteapp/app/src/main/java/com/muteapp/muteapp/FloatingButtonService.kt:112: Warning: onTouch should call View#performClick when a click is detected [ClickableViewAccessibility]
            override fun onTouch(view: View, event: MotionEvent): Boolean {
                         ~~~~~~~

   Explanation for issues of type "ClickableViewAccessibility":
   If a View that overrides onTouchEvent or uses an OnTouchListener does not
   also implement performClick and call it when clicks are detected, the View
   may not handle accessibility actions properly. Logic handling the click
   actions should ideally be placed in View#performClick as some accessibility
   services invoke performClick when a click action should occur.

/Users/vinoth/muteapp/muteapp/app/src/main/res/layout/activity_main.xml:86: Warning: Hardcoded string "Start Floating Mute Button", should use @string resource [HardcodedText]
            android:text="Start Floating Mute Button"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 26 warnings
